#!/usr/bin/env node

/**
 * Module dependencies.
 */



const config_service = require('../lib/configService');
config_service.set_config(require('../config'), true);
const config = config_service.get_config();
const database = require("../lib/database");
const debug = require('debug')('idm:server');
const fs = require("fs");
const http = require('http');
const https = require("https");
const os = require('os');
const cluster = require('cluster');
const clusterWorkerSize = os.cpus().length;

let server;

/**
 * Normalize a port into a number, string, or false.
 */

function normalize_port(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */

function on_error(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const port = error.port;

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function on_listening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function start_server(){
   let options = {}

  if (config.https.enabled) {
    options = {
        key: fs.readFileSync(config.https.key_file).toString(),
        cert: fs.readFileSync(config.https.cert_file).toString()
    };
    if (config.https.ca_certs) {
        options.ca = [];
        for (const ca in config.https.ca_certs) {
            options.ca.push(fs.readFileSync(config.https.ca_certs[ca]).toString());
        }
    }
  }

  const app = require('../app');
  server = http.createServer(app); 

  /**
  * Get port from environment and store in Express.
  */
  server.listen(normalize_port(config.port));
  server.on('error', on_error);
  server.on('listening', on_listening);

  if (config.https.enabled) {
    const serverSecure = https.createServer(options, app);

    serverSecure.listen(config.https.port, function() {
      debug('Listening on port ' + serverSecure.address().port);
    });
  }
}


/**
 * Create HTTP or HTTPS server.
 */
database.connect(config, err =>{

  if (clusterWorkerSize > 1) {
      if (cluster.isMaster) {
        for (let i = 0; i < clusterWorkerSize; i++) {
          cluster.fork();
        }
      } else {
        start_server();
      }
    } else {
      start_server();
    }
});

